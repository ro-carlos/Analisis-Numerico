return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
res = res + (body(g/factorial(i)))
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,10)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
res = res + (body(g)/factorial(i))
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,10)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
res = res + (body(g)/(factorial(i)[0]))
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,10)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
#res = res + (body(g)/(factorial(i)))
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,10)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
#res = res + (body(g)/(factorial(i)))
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
res = res + (body(g))*x^k
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
expresion = expression(x^k/factorial(i))
res = res + (body(g))*x^k
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
expresion = expression('x'^i/factorial(i))
res = res + (body(g))*x^k
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
expresion = expression('x'^i/factorial(i))
res = res + (body(g))*expresion
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
expresion = expression('x'^i/factorial(i))
print(expresion)
res = res + (body(g))
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
#bonoFisica
#Utilizando la regla de simpson para hacer una aproximacion y
#el metodo por defecto para resolver para resolver integrales
#Valores constantes geometricas: a, b, c y el radio
a = 0.1
b = 0.2
c = 0.3
p = 3
#Valores constantes física: corriente y permitividad magnetica
I = 10
perMag = 4*pi*10^(-7)
#Otras constantes: limite inferior de la integral, limite superior de la integral
#cantidad de intervalor, parte constante del denominador
limInferior = 0
limSuperior = 2*pi
n = 100
denom1 = a^2+b^2+c^2+p^2
#Funcion para el campo magnetico en y, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*cos(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bY = function(x) (a*perMag*I*p*cos(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en z, viene dado por una funcion:
# f(Θ)=(a*perMag*I*p*sin(Θ) / 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bz = function(x) (a*perMag*I*p*sin(x))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
#Funcion para el campo magnetico en x, viene dado por una funcion:
# f(Θ)=(perMag*I*-p*(c*sin(Θ)+b*cos(Θ)))/ 4*pi*(a^2+b^2+c^2+p^2-2*p*(b*cos(Θ)+c*sin(Θ))^(3/2)
bx = function(x) (perMag*I*-p*(c*sin(x)+b*cos(x)))/(4*pi*(denom1-2*p*(b*cos(x)+c*sin(x)))^(3/2))
factorial <- function(n) {
if(n <= 1) {
return(1)
} else {
return(n * factorial(n-1))
}
}
g =function(x) {}
#polinomio de taylor centrado en a=0 hasta n
polinomioTaylor=function(fun, n){
i=0
res = 0
body(g) = D(body(bx), 'x')
while(i<=n){
#
print(factorial(i))
expresion = expression('x'^i/factorial(i))
print(expresion)
res = res
body(g) = D(body(bx), 'x')
i=i+1
}
}
polinomioX = polinomioTaylor(bx,5)
#integrate(polinomioX,limInferior,limSuperior)
